{"posts": [{"title": "<시작하세요! 도커/쿠버네티스> 소감", "preface": "전반부(~4장)은 도커, 그 이후(5~14장)는 k8s를 소개한다.k8s 공식 도큐먼트를 보기 전에 읽으면 딱 좋을 수준이다.책이 두껍지만 코드가 많아서, 그렇게까지 겁먹을 사이즈는 아니다. (다 읽고 나니 그런 생각이 들었다)x.509 적용 시작하면서 따라해보기를 포", "url": "https://velog.io/@roeniss", "author": "문성혁"}, {"title": "모델 경량화 4 - 행렬 분해(Filter Decomposition)", "preface": "행렬 분해 by 홍원의 마스터님, BoostCamp AI Tech 8주차", "url": "https://blogik.netlify.app/", "author": "김성익"}, {"title": "Golang으로 백엔드 개발하기 - 1. 데이터베이스 작업하기 (Ent 프레임워크 이용)", "preface": "<img src=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation.png\" alt=\"Featured image of post Golang으로 백엔드 개발하기 - 1. 데이터베이스 작업하기 (Ent 프레임워크 이용)\" /><h2 id=\"시작하며\">시작하며</h2>\n<p>Go 언어를 처음 시작한 지 벌써 1년이 지났다니 시간이 참 빠른 것 같습니다! Java는 Spring이라고하는 거대한 프레임워크가 자리 잡고 있어 딱히 어떤 프레임워크나 라이브러리를 사용할지에 대한 고민이 별로 필요 없었던 것 같습니다. 반면 Go 언어는 정형화된 아키텍쳐에 대한 내용이 별로 없고 프레임워크나 라이브러리의 대세도 참 빠르게 변하다보니 그게 장점이라면 장점이겠지만 이래저래 고생도 했네요.</p>\n<p>게다가 Go 언어는 개발 입문자들이 많이 사용하지 않는 언어라 그런지 아직 웹 백엔드 개발에 익숙하지 않은 (저처럼) 사람들을 위한 자료들은 많이 없었던 것 같습니다. 예를 들면 Java의 스프링이나 Node.js의 express, Python의 django 같은 프레임워크들은 인프런만 가봐도 A to Z로 알려주는 강의가 많죠. 하지만 Go 언어는 보통 언어 입문 내용들이 많고,\n<em><del>&ldquo;자~! 여러분들은 어차피 개발 초보자들이 아니시잖아요? 이쯤하면 Golang을 맛보셨으니 알아서들 입맛대로 쓰십시오~!&quot;</del></em> 식으로 입문 이후의 내용은 보통 동시성 패턴에 대한 내용들일 뿐\n백엔드 개발을 위한 아키텍쳐나 Unit test를 어떻게 실제로 적용하는지 같은 예시는 많이 없었습니다. 그래서 이번엔 Golang으로 웹 백엔드 개발을 하는 과정에 대해 좀 적어볼까합니다!</p>\n<p>이번 글은 그런 내용을 다룰 시리즈 중 첫 번째로 Golang으로 데이터베이스 작업하는 것과 관련한 내용을 담아봤습니다. 데이터베이스를 어떻게 사용하는지에 대한 세세한 내용보단 어떤 프레임워크를 추천드리고, 그 프레임워크를 사용하는 모습이 어떠한지\n가볍게 쓰윽 보시면 좋을 것 같습니다.</p>\n<h2 id=\"3-layered-architecture에-대해-간단히-짚고-넘어가겠습니다\">3 layered architecture에 대해 간단히 짚고 넘어가겠습니다</h2>\n<ul>\n<li><code>Presentation layer</code> - 어떻게 데이터가 클라이언트에게 보여줄 지에 대한 작업을 담당. 클라이언트는 이 계층을 통해 상호작용한다.</li>\n<li><code>Business/Domain layer</code> - Presentation layer와 Data access layer의 사이에 위치해 비즈니스 룰과 그 룰을 따르는 비즈니스 로직을 구현. 보통 이 계층에 Service라고 하는 클래스(혹은 타입 등등)가 위치한다.</li>\n<li><code>Data Access Layer</code> - DB에 접근하는 작업을 담당. DAO(Data Access Object, repository)가 위치한다.</li>\n</ul>\n<p>대부분의 웹 애플리케이션은 3 layered architecture라고하는 구조로 개발됩니다. 편리하고 유지 보수하기 쉬운 개발을 위해서는 프레임워크나 라이브러리가 제공하는 기능들을 영리하게 사용할 수 있어야할 것입니다.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">Get</span><span class=\"p\">(</span><span class=\"s\">&#34;/users/:id&#34;</span><span class=\"p\">,</span> <span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">ctx</span> <span class=\"o\">*</span><span class=\"nx\">fiber</span><span class=\"p\">.</span><span class=\"nx\">Ctx</span><span class=\"p\">)</span> <span class=\"kt\">error</span> <span class=\"p\">{</span>\n<span class=\"nx\">userId</span> <span class=\"o\">:=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">Params</span><span class=\"p\">(</span><span class=\"s\">&#34;id&#34;</span><span class=\"p\">)</span>\n<span class=\"c1\">// ... 기타 작업 생략\n</span><span class=\"c1\"></span> <span class=\"k\">return</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">JSON</span><span class=\"p\">(</span><span class=\"kd\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span>\n<span class=\"s\">&#34;userId&#34;</span><span class=\"p\">:</span> <span class=\"nx\">userId</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div><p><figure style=\"flex-grow: 196; flex-basis: 472px\">\n<a href=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/presentation-layer-output.png\" data-size=\"323x164\"><img src=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/presentation-layer-output.png\"\nsrcset=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/presentation-layer-output_hu82c0e5805551b09a7aaeabc91ba76592_7927_480x0_resize_box_2.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/presentation-layer-output_hu82c0e5805551b09a7aaeabc91ba76592_7927_1024x0_resize_box_2.png 1024w\"\nwidth=\"323\"\nheight=\"164\"\nloading=\"lazy\"\nalt=\"presentation-layer-output.png\">\n</a>\n<figcaption>presentation-layer-output.png</figcaption>\n</figure></p>\n<p><em>url path variable은 어떻게 인식할 것인지, Golang의 map을 어떻게 JSON으로 직렬화할 지와 같은 로직들이 모두 프레임워크에서 제공됨.</em></p>\n<p>저는 Presentation layer는 대부분 웹 프레임워크 자체나 그것에 대해 구현된 핸들러 단에서 제공이 된다고 생각하고 있습니다. 예를 들어 어떻게 응답을 JSON 형태로 제공할지 HTML, XML, 이진 데이터(gRPC)와 같은 내용들 말이죠. 즉 우리가 그닥 개발할 것이 많지는 않습니다.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"c1\">// Service layer 코드 예시 - 우리 도메인 특정 코드들이 많아 남(우리 팀 혹은 기업이 아닌 사람들)이 만든 오픈소스로 대체하기 힘듦.\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">svc</span> <span class=\"o\">*</span><span class=\"nx\">UserService</span><span class=\"p\">)</span> <span class=\"nf\">updateProfileImage</span><span class=\"p\">(</span><span class=\"nx\">requestUser</span> <span class=\"o\">*</span><span class=\"nx\">User</span><span class=\"p\">,</span> <span class=\"nx\">imageFile</span> <span class=\"nx\">Image</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nx\">UserResponse</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">){</span>\n<span class=\"nx\">requestUser가</span> <span class=\"nx\">인증된</span> <span class=\"nx\">유저인가</span>\n<span class=\"nx\">인증된</span> <span class=\"nx\">유저가</span> <span class=\"nx\">아니라면</span> <span class=\"nx\">어떤</span> <span class=\"nx\">에러를</span> <span class=\"nx\">리턴할</span> <span class=\"nx\">것인가</span>\n<span class=\"nx\">imageFile이</span> <span class=\"nx\">제대로</span> <span class=\"nx\">된</span> <span class=\"nx\">Image인가</span>\n<span class=\"nx\">제대로</span> <span class=\"nx\">된</span> <span class=\"nx\">Image가</span> <span class=\"nx\">아니라면</span> <span class=\"nx\">어떤</span> <span class=\"nx\">에러를</span> <span class=\"nx\">리턴할</span> <span class=\"nx\">것인가</span>\n<span class=\"nx\">imageFile을</span> <span class=\"nx\">업로드</span>\n<span class=\"nx\">업로드</span> <span class=\"nx\">과정</span> <span class=\"nx\">중</span> <span class=\"nx\">에러</span> <span class=\"nx\">발생</span> <span class=\"nx\">시</span> <span class=\"nx\">어떤</span> <span class=\"nx\">에러를</span> <span class=\"nx\">리턴할</span> <span class=\"nx\">것인가</span>\n<span class=\"o\">...</span> <span class=\"nx\">등등</span> <span class=\"nx\">생략</span>\n<span class=\"k\">return</span> <span class=\"nx\">생략</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>반면 Business layer에서는 비즈니스 룰과 로직이라고 하는 우리 애플리케이션의 핵심적인 기능에 대한 구현이나 조합이 이루어지게 되는데 이 부분 타 오픈소스들로 대체되기는 힘든 부분이 많아 당연히 직접 개발하는 경우가 많습니다.</p>\n<p><figure style=\"flex-grow: 190; flex-basis: 456px\">\n<a href=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/jpa-method.png\" data-size=\"582x306\"><img src=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/jpa-method.png\"\nsrcset=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/jpa-method_hu755e2c0222938f117e5959a368d53523_41512_480x0_resize_box_2.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/jpa-method_hu755e2c0222938f117e5959a368d53523_41512_1024x0_resize_box_2.png 1024w\"\nwidth=\"582\"\nheight=\"306\"\nloading=\"lazy\"\nalt=\"jpa-method.png\">\n</a>\n<figcaption>jpa-method.png</figcaption>\n</figure></p>\n<p><em>Java의 JPA 프레임워크의 경우 기본적으로 CRUD 메소드를 제공해준다.</em></p>\n<p><figure style=\"flex-grow: 267; flex-basis: 642px\">\n<a href=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/django-method.png\" data-size=\"717x268\"><img src=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/django-method.png\"\nsrcset=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/django-method_hu35af591f1da6148e3aa53a5e144defd6_38902_480x0_resize_box_2.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/django-method_hu35af591f1da6148e3aa53a5e144defd6_38902_1024x0_resize_box_2.png 1024w\"\nwidth=\"717\"\nheight=\"268\"\nloading=\"lazy\"\nalt=\"django-method.png\">\n</a>\n<figcaption>django-method.png</figcaption>\n</figure></p>\n<p><em>Python의 django의 경우 Join 기능도 기본적으로 제공해준다.</em></p>\n<p>이제 Data Access Layer만이 남았습니다. 이 계층 또한 대부분의 객체지향 언어들에선 ORM이라는 개념을 통해 대부분의 프레임워크들이 많은 기능을 제공합니다. 그래서 필요한 경우에만 추가적으로 정의하는 형태로 편리하게 이용할 수 있습니다.</p>\n<p>이번 글에서는 <strong>Golang은 이 Data Access Layer(Repository)에서 어떤 DB framework을 사용하면 좋을지 어떤 식으로 사용해나갈 수 있을지에 대해</strong> 다뤄보려 합니다.</p>\n<h2 id=\"golang의-좋은-db-framework-좀-추천해주세요\">Golang의 좋은 DB framework 좀 추천해주세요.</h2>\n<p><figure style=\"flex-grow: 154; flex-basis: 371px\">\n<a href=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/ent-gorm-stars.png\" data-size=\"797x515\"><img src=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/ent-gorm-stars.png\"\nsrcset=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/ent-gorm-stars_hu93b57724131d9ce35065e9adedba8094_34328_480x0_resize_box_2.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/ent-gorm-stars_hu93b57724131d9ce35065e9adedba8094_34328_1024x0_resize_box_2.png 1024w\"\nwidth=\"797\"\nheight=\"515\"\nloading=\"lazy\"\nalt=\"ent-gorm-stars.png\">\n</a>\n<figcaption>ent-gorm-stars.png</figcaption>\n</figure></p>\n<p><em>차트 출처: <a href=\"https://star-history.t9t.io/\">https://star-history.t9t.io/</a></em></p>\n<p>Golang에는 Django나 JPA와 같은 강력한 데이터베이스 관리 프레임워크가 몇 년 전까지 존재하지 않았던 것 같습니다. 생 쿼리문을 직접 짤 게 아닌 경우라면 얼마 전까지는 <code>gorm</code> 이라고하는 프레임워크가 거의 유일한 선택지였던 것 같습니다. 하지만 요즘 추세를 보면 무섭게 <code>ent</code>라는 패키지가 쫓아오고 있는 모습을 보실 수 있습니다.</p>\n<h3 id=\"-gorm-프레임워크-사용-후기\">👎 gorm 프레임워크 사용 후기</h3>\n<p>제가 golang 개발을 막 시작했던 때가 2020년 여름쯤이었기에 저도 <code>gorm</code>을 첫 데이터베이스 프레임워크로 사용했었지만 몇 가지 단점들이 존재했습니다.</p>\n<ol>\n<li>\n<p><strong>문서의 내용이 빈약했고, 에러에 대한 설명이나 디버깅이 쉽지 않았다.</strong></p>\n<p>문서의 내용들이 실질적인 다양한 케이스에 대한 예시나 설명이 부족했다고 느껴졌습니다. 또한 에러가 발생한 경우 왜 에러가 발생한 것인지 정확한 위치나 이유가 제공되지 않아 디버깅하기도 힘들었던 것 같습니다.</p>\n</li>\n<li>\n<p><strong>불편한 struct tag 기반의 테이블, 컬럼 설정</strong></p>\n<p>Go가 강력히 type을 강제하면서 높은 안정성과 편의성을 제공하는 반면 gorm은 struct tag를 기반으로 여러 설정들을 관리하도록 개발되었습니다. Go 언어를 좋아하지만 struct tag에 대해서는 가뜩이나 조금의 불만을 갖고 있었는데 이런 저런 컬럼 설정들마저 struct tag로 이용하니 정확히 이 tag가 동작하는 태그인지, 왜 에러가 나거나 적용이 안되는지도 안전하게 확인할 수 없었고 무엇보다 가독성이 너무 너무~! 좋지 않았습니다.</p>\n</li>\n<li>\n<p><strong>제공되는 메소드가 별로 없다.</strong></p>\n<p>gorm은 아주 가벼운 느낌이었습니다. 하지만 데이터베이스 프레임워크를 사용함에도 불구하고 너무나 제공되는 메소드가 없다고 느껴졌습니다. JPA나 Django는 조금의 설정만 해주면 CRUD와 Join까지 제공해주는데 gorm은 거의 정말 정말 기본적인 기능을 하는 메소드에 적절한 인자를 전달함으로써 동작시켜야합니다. 예를 들어 메소드가 어떤 매개변수를 왜 필요로 하는지에 내용이 그닥 없고 그냥 통으로 Create메소드에 알아서 적절한 inteface{}인자를 전달해야하는 형태라 Go의 장점인 강력한 type을 바탕으로한 안정성, 편의성을 누릴 수도 없었고 이럴꺼면 파이썬 쓰지&hellip; 싶은 생각이 자주 들었습니다.</p>\n</li>\n</ol>\n<h3 id=\"-추천하는-프레임워크---ent\">👍 추천하는 프레임워크 - ent</h3>\n<p>물론 위의 Github star history만 봐도 아실 수 있겠지만 ent는 매우 무섭게 성장 중인 Golang의 데이터베이스 관리 프레임워크입니다. 게다가 아마 Facebook에서 내부적으로 사용하다가 오픈소스화한 프로젝트인 걸로 알고 있는데 따라서 어느 정도의 완성도나 편의성이 보장되겠죠. ㅎㅎ 저는 사이드 프로젝트에서 gorm을 사용하다가 많은 불편을 느꼈고, Go 개발 커뮤니티에서 ent가 그렇게나 핫하다길래 ent로 data access layer를 마이그레이션했고 만족 중입니다. ㅎㅎ</p>\n<p><strong>ent의 사용 후기 및 특징</strong>은 아래와 같습니다.</p>\n<ol>\n<li>\n<p><strong>타입을 바탕으로 안전하고 편리하게 테이블을 설계할 수 있다.</strong></p>\n<p>테이블, 컬럼 정의들이 모두 ent 패키지의 컬럼 type 혹은 테이블 type, 관계 type 등등을 이용해서 정의할 수 있기 때문에 너무 너무 편리하죠. 게다가 복잡한 struct tag도 안녕~! <code>ent</code>는 미리 정의된 타입과 메소드들로 다양한 설정을 할 수 있습니다.</p>\n</li>\n<li>\n<p><strong>다양한 메소드 제공</strong></p>\n<p>go generate라고 하는 기능을 통해 우리가 정의한 스키마(테이블 및 필드 설정)을 바탕으로 다양한 타입과 메소드들을 만들어줍니다. 이 부분으로 인해 꽤 빌드 시간이 늘어나는 느낌이긴한데 그래봤자 2초 정도인데 ent가 제공해주는 메소드들로 인해 개발적 편의와 안정성이 훨씬 크다고 느끼기 때문에 만족하고 있습니다.</p>\n</li>\n<li>\n<p><strong>별 다른 문서가 필요 없다..?</strong></p>\n<p>그냥 메소드를 기반으로 이용할 수 있다보니 그 사용 방법이 직관적인 편이고, 경우에 따라서는 코드 자체를 까보면 이해되는 별 다른 문서 없이도 이용할 수 있었던 것 같습니다.</p>\n</li>\n<li>\n<p><strong>참조 관계 설정이 좀 헷갈린다</strong> (몇 안 되는 단점 중 하나)</p>\n<p>뭔가 From이나 To등을 통해 참조 관계를 정의하는데 이 From이 어떤 테이블을 From으로 생각하는건지 뭔가 많이 애매합니다. 커뮤니티를 보면 이로 인해 많은 분들도 혼란을 겪고 있는 현황입니다.</p>\n<p>하지만 너무 걱정은 마세요~! 이번 글에서 정리해드리려하니까요~! ㅎㅎ</p>\n</li>\n</ol>\n<h2 id=\"ent-패키지를-통해-database-작업해보기\">Ent 패키지를 통해 Database 작업해보기</h2>\n<p>&ldquo;<strong>시작하며</strong>&ldquo;에서도 말씀드렸다시피 사실 Go 언어로 개발하시는 분들 중에 정말 개발 자체가 익숙하지 않은 분들은 정말 정말 적으리라 생각합니다&hellip;ㅎㅎ 따라서 너무 디테일한 내용을 직접 알려드리기 보다는 커다란 흐름이나 헷갈리는 요소들을 짚어드리는 방향으로 글을 작성해 보겠습니다.</p>\n<h3 id=\"예시-application---여행-상품-관리-crud-서비스\">예시 Application - 여행 상품 관리 CRUD 서비스</h3>\n<ul>\n<li>1:N의 여행 상품 담당자 관계 - 담당자(일종의 유저)는 여행 상품과 1:N 관계</li>\n</ul>\n<p>위의 관계를 갖는 여행 상품 관리 CRUD 서비스를 만들어보겠습니다. 본 글에서는 코드를 짧게 짧게 잘라서 올릴테니 원본 코드를 보고싶으신 분들은 제 깃헙을 참고해주세요.</p>\n<p>원본 코드 - <a href=\"https://github.com/umi0410/how-to-backend-in-go\">https://github.com/umi0410/how-to-backend-in-go</a></p>\n<h3 id=\"1-ent-package-설치\">1. ent package 설치</h3>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-shell\" data-lang=\"shell\"><span class=\"c1\"># 참고: https://entgo.io/docs/tutorial-setup/#installation</span>\n$ go get entgo.io/ent/cmd/ent\n</code></pre></div><p>우선 ent는 다양한 명령 기능도 제공하고 저희는 그걸 필요로 하기 때문에 ent를 설치해주어야합니다. 스키마 정의 코드 또한 ent 를 이용해 자동으로 기본 형태를 제공 받을 수 있습니다. ent 패키지를 설치한 이후 저희는 다음과 같은 명령을 수행하게 될 것입니다.</p>\n<ol>\n<li><code>$ go run entgo.io/ent/cmd/ent init {{엔티티 이름}}</code> - 엔티티 이름을 바탕으로한 초기 스키마 코드 생성</li>\n<li><code>$ go generate ./ent</code> - 정의했던 스키마를 바탕으로 한 많은 boilerplate 코드를 자동으로 생성</li>\n</ol>\n<h3 id=\"2-스키마-설정\">2. 스키마 설정</h3>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-shell\" data-lang=\"shell\">$ go run entgo.io/ent/cmd/ent init User <span class=\"c1\"># or shortly $ ent init User</span>\n$ go run entgo.io/ent/cmd/ent init TourProduct <span class=\"c1\"># or shortly $ ent init TourProduct</span>\n</code></pre></div><p>위의 명령어들을 통해 User와 User가 관리하는 TourProduct라는 엔티티들의 스키마를 작성할 것입니다. 정확한 스키마 작성에 대한 설명은 생략하겠습니다. <a class=\"link\" href=\"https://entgo.io/docs/schema-def\" target=\"_blank\" rel=\"noopener\"\n>ent 공식 문서</a>에 매우 잘 설명되어있고, <a class=\"link\" href=\"https://github.com/ent/ent/tree/master/examples\" target=\"_blank\" rel=\"noopener\"\n>examples in ent github</a>에서 대부분의 예시 코드도 확인해볼 수 있기 때문입니다.</p>\n<h4 id=\"-참조-관계-설정-시의-from과-to\">⭐ 참조 관계 설정 시의 From과 To</h4>\n<p>다만 한 가지. Edge를 이용해 <strong>참조 관계를 설정할 때 <code>From</code>과 <code>To</code>의 사용에 대해</strong> 한 가지만 짚고 넘어가려 합니다. 저를 포함해 많은 ent 사용자분들께서 Edge 설정 시에 많은 혼란을 겪습니다. 그 이유는 일반적으로 우리는 1:N 관계에서 N쪽이 From, 1쪽이 To가 되며 N쪽 테이블에서 1을 참조하는 내용을 정의하는 반면 ent는 그 반대로 동작하기 때문입니다.</p>\n<p><em>(ent에서의 참조 관계 정의 방식에 대해 궁금하지 않으신 분들은 넘어가셔도 됩니다.)</em></p>\n<p><figure style=\"flex-grow: 296; flex-basis: 711px\">\n<a href=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation.png\" data-size=\"560x189\"><img src=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation.png\"\nsrcset=\"https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation_huda98d5d877ff5063fa9c786910881686_21160_480x0_resize_box_2.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation_huda98d5d877ff5063fa9c786910881686_21160_1024x0_resize_box_2.png 1024w\"\nwidth=\"560\"\nheight=\"189\"\nloading=\"lazy\"\nalt=\"o2m-relation.png\">\n</a>\n<figcaption>o2m-relation.png</figcaption>\n</figure></p>\n<p><em>출처: <a href=\"https://entgo.io/docs/schema-edges\">https://entgo.io/docs/schema-edges</a></em></p>\n<p>위와 같은 경우 데이터베이스상으로는 <code>Pet</code> 테이블이 자신의 <code>owner_id</code> 컬럼을 통해 <code>User</code>을 참조하므로 <code>Pet</code>이 <code>From</code>, <code>User</code>가 <code>To</code>가 되며 이를 통해 owner라는 관계를 나타낼 수 있습니다.\n하지만 <code>ent</code>는 그 반대로 <code>User</code>가 <code>Pet</code>을 관리(참조)한다는 의미로 <code>User</code>가 <code>From</code>, <code>Pet</code>이 <code>To</code>가 되어 <code>pets</code>라는 관계를 나타내는 식으로 정의합니다. 이러한 대조적인 방식으로 인해 많은 사람들이 혼란을 겪는 것 같습니다.</p>\n<p>저는 이러한 ent가 이런 식으로 관계를 정의하는 이유가 collection의 아이템 관리 방식과 유사하게 관계를 정의하고 싶어서가 아니었을까 싶습니다.</p>\n<p>예를 들어 일반적으로 우리는 collection에 아이템을 추가할 때 다음과 같이 코드를 작성하지 데이터베이스처럼 아이템이 자신이 속하는 컬렉션을 설정하지 않습니다.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"c1\">// Go에서의 예시\n</span><span class=\"c1\">// 1. 컬렉션 방식\n</span><span class=\"c1\"></span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">Pets</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">Pets</span><span class=\"p\">,</span> <span class=\"nx\">newPet</span><span class=\"p\">)</span>\n<span class=\"c1\">// 2. 데이터베이스와 유사한 참조 방식\n</span><span class=\"c1\"></span><span class=\"nx\">newPet</span><span class=\"p\">.</span><span class=\"nx\">Owner</span> <span class=\"p\">=</span> <span class=\"nx\">user</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-java\" data-lang=\"java\"><span class=\"c1\">// Java에서의 예시\n</span><span class=\"c1\">// 1. 컬렉션 방식\n</span><span class=\"c1\"></span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"na\">pets</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">newPet</span><span class=\"o\">);</span>\n<span class=\"c1\">// 2. 데이터베이스와 유사한 참조 방식\n</span><span class=\"c1\"></span><span class=\"n\">newPet</span><span class=\"o\">.</span><span class=\"na\">setOwner</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">);</span>\n</code></pre></div><p>아무튼 그래서 저는 ent에서는 <strong>1:N 방식에서 1이 연관 관계의 주인처럼 동작/정의한다</strong>고 생각하고 작업하고 있습니다. 사실 굳이 저렇게 정의하는 이유가 뭘까 나름의 이유를 붙여본 것이고, 그냥 <strong>예시를 참고하시면서 테이블의 참조 관계랑 반대라고 외우시길 추천</strong>(ㅎㅎ&hellip;.;;)합니다!</p>\n<h4 id=\"스키마-정의-및-적용\">스키마 정의 및 적용</h4>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"c1\">// ent/schema/user.go\n</span><span class=\"c1\"></span><span class=\"kn\">package</span> <span class=\"nx\">schema</span>\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n<span class=\"s\">&#34;entgo.io/ent&#34;</span>\n<span class=\"s\">&#34;entgo.io/ent/schema/edge&#34;</span>\n<span class=\"s\">&#34;entgo.io/ent/schema/field&#34;</span>\n<span class=\"p\">)</span>\n<span class=\"c1\">// User holds the schema definition for the User entity.\n</span><span class=\"c1\"></span><span class=\"kd\">type</span> <span class=\"nx\">User</span> <span class=\"kd\">struct</span> <span class=\"p\">{</span>\n<span class=\"nx\">ent</span><span class=\"p\">.</span><span class=\"nx\">Schema</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// Fields of the User.\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">User</span><span class=\"p\">)</span> <span class=\"nf\">Fields</span><span class=\"p\">()</span> <span class=\"p\">[]</span><span class=\"nx\">ent</span><span class=\"p\">.</span><span class=\"nx\">Field</span> <span class=\"p\">{</span>\n<span class=\"k\">return</span> <span class=\"p\">[]</span><span class=\"nx\">ent</span><span class=\"p\">.</span><span class=\"nx\">Field</span><span class=\"p\">{</span>\n<span class=\"c1\">// 타입을 기반으로 안전하고 편리하게 컬럼을 정의할 수 있습니다.\n</span><span class=\"c1\"></span> <span class=\"nx\">field</span><span class=\"p\">.</span><span class=\"nf\">String</span><span class=\"p\">(</span><span class=\"s\">&#34;id&#34;</span><span class=\"p\">),</span>\n<span class=\"nx\">field</span><span class=\"p\">.</span><span class=\"nf\">String</span><span class=\"p\">(</span><span class=\"s\">&#34;name&#34;</span><span class=\"p\">),</span>\n<span class=\"nx\">field</span><span class=\"p\">.</span><span class=\"nf\">Bool</span><span class=\"p\">(</span><span class=\"s\">&#34;isActivated&#34;</span><span class=\"p\">).</span><span class=\"nf\">Default</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// Edges of the User.\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">User</span><span class=\"p\">)</span> <span class=\"nf\">Edges</span><span class=\"p\">()</span> <span class=\"p\">[]</span><span class=\"nx\">ent</span><span class=\"p\">.</span><span class=\"nx\">Edge</span> <span class=\"p\">{</span>\n<span class=\"k\">return</span> <span class=\"p\">[]</span><span class=\"nx\">ent</span><span class=\"p\">.</span><span class=\"nx\">Edge</span><span class=\"p\">{</span>\n<span class=\"c1\">// ent에서는 To를 정의하는 스키마, 즉 여기선 User\n</span><span class=\"c1\"></span> <span class=\"c1\">// 가 참조 관계의 주인이라고 정의합니다.\n</span><span class=\"c1\"></span> <span class=\"c1\">// 일반적인 JPA의 방식과는 반대입니다.\n</span><span class=\"c1\"></span> <span class=\"nx\">edge</span><span class=\"p\">.</span><span class=\"nf\">To</span><span class=\"p\">(</span><span class=\"s\">&#34;products&#34;</span><span class=\"p\">,</span> <span class=\"nx\">TourProduct</span><span class=\"p\">.</span><span class=\"nx\">Type</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-shell\" data-lang=\"shell\">$ go generate ./ent\n</code></pre></div><p>아무튼 저는 User 스키마를 이렇게 설정했고 이 스키마들을 적용해 ent가 generate해준 코드들을 이용해보겠습니다.</p>\n<p>(TourProduct 스키마는 생략했습니다. 원본 코드를 참고해주세요.)</p>\n<h3 id=\"3-repository-정의\">3. repository 정의</h3>\n<p>ent가 데이터베이스 관련 작업을 위한 다양한 메소드를 지원해줍니다. 하지만 ent는 간단 간단한 메소드들을 조합해서 사용해야하기 때문에 비즈니스 로직을 구현하는 계층에서 매번 ent의 메소드를 조합하며 사용하는 것은 계층의 관심사와 책임을 흐리게 할 수 있습니다. 따라서 몇 가지 메소드들을 <code>data access layer</code>인 <code>repository</code>에 정의하겠습니다.</p>\n<p>예를 들면 특정 user가 관리하는 여행 상품을 모두 조회하는 <code>FindAllByManager(managerID string)</code>와 같은 메소드 말이죠. 이 작업을 위해서는 User 테이블과 TourProduct 테이블을 조인해야하는데 ent가 역시 이 기능을 제공합니다.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"c1\">// repository.go\n</span><span class=\"c1\"></span><span class=\"o\">...</span>\n<span class=\"kd\">type</span> <span class=\"nx\">TourProductRepository</span> <span class=\"kd\">struct</span><span class=\"p\">{</span>\n<span class=\"nx\">Client</span> <span class=\"o\">*</span><span class=\"nx\">ent</span><span class=\"p\">.</span><span class=\"nx\">TourProductClient</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">func</span> <span class=\"p\">(</span><span class=\"nx\">repo</span> <span class=\"o\">*</span><span class=\"nx\">TourProductRepository</span><span class=\"p\">)</span> <span class=\"nf\">FindAllByManager</span><span class=\"p\">(</span><span class=\"nx\">managerID</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"o\">*</span><span class=\"nx\">ent</span><span class=\"p\">.</span><span class=\"nx\">TourProduct</span><span class=\"p\">{</span>\n<span class=\"nx\">result</span> <span class=\"o\">:=</span> <span class=\"nx\">repo</span><span class=\"p\">.</span><span class=\"nx\">Client</span><span class=\"p\">.</span><span class=\"nf\">Query</span><span class=\"p\">().</span>\n<span class=\"c1\">// 특정 manager_id의 TourProduct를 조회하도록 조인\n</span><span class=\"c1\"></span> <span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"nx\">tourproduct</span><span class=\"p\">.</span><span class=\"nf\">HasManagerWith</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">ID</span><span class=\"p\">(</span><span class=\"nx\">managerID</span><span class=\"p\">))).</span>\n<span class=\"nf\">WithManager</span><span class=\"p\">().</span>\n<span class=\"nf\">AllX</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nf\">TODO</span><span class=\"p\">())</span>\n<span class=\"k\">return</span> <span class=\"nx\">result</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3 id=\"4-실행\">4. 실행</h3>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-go\" data-lang=\"go\"><span class=\"c1\">// main.go\n</span><span class=\"c1\"></span><span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"o\">...</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"s\">&#34;전체 유저 조회&#34;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">user</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">userRepository</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Printf</span><span class=\"p\">(</span><span class=\"s\">&#34;User(id=%s, name=%s)\\n&#34;</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">ID</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"s\">&#34;--------------------------------------------------------------------------&#34;</span><span class=\"p\">)</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"s\">&#34;전체 여행 상품 조회&#34;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">tour</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">tourProductRepository</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Printf</span><span class=\"p\">(</span><span class=\"s\">&#34;TourProduct(id=%d, name=%s, manager=%s)\\n&#34;</span><span class=\"p\">,</span> <span class=\"nx\">tour</span><span class=\"p\">.</span><span class=\"nx\">ID</span><span class=\"p\">,</span> <span class=\"nx\">tour</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">,</span> <span class=\"nx\">tour</span><span class=\"p\">.</span><span class=\"nx\">Edges</span><span class=\"p\">.</span><span class=\"nx\">Manager</span><span class=\"p\">.</span><span class=\"nx\">ID</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"s\">&#34;--------------------------------------------------------------------------&#34;</span><span class=\"p\">)</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Println</span><span class=\"p\">(</span><span class=\"nx\">user1</span><span class=\"p\">.</span><span class=\"nx\">ID</span> <span class=\"o\">+</span> <span class=\"s\">&#34;가 관리하는 전체 여행 상품 조회&#34;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">tour</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"nx\">tourProductRepository</span><span class=\"p\">.</span><span class=\"nf\">FindAllByManager</span><span class=\"p\">(</span><span class=\"nx\">user1</span><span class=\"p\">.</span><span class=\"nx\">ID</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nf\">Printf</span><span class=\"p\">(</span><span class=\"s\">&#34;TourProduct(id=%d, name=%s, manager=%s)\\n&#34;</span><span class=\"p\">,</span> <span class=\"nx\">tour</span><span class=\"p\">.</span><span class=\"nx\">ID</span><span class=\"p\">,</span> <span class=\"nx\">tour</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">,</span> <span class=\"nx\">tour</span><span class=\"p\">.</span><span class=\"nx\">Edges</span><span class=\"p\">.</span><span class=\"nx\">Manager</span><span class=\"p\">.</span><span class=\"nx\">ID</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><pre><code>전체 유저 조회\nUser(id=umi0410, name=박진수)\nUser(id=devumi, name=개발자)\n--------------------------------------------------------------------------\n전체 여행 상품 조회\nTourProduct(id=1, name=미국 뉴욕 여행, manager=umi0410)\nTourProduct(id=2, name=유럽 여행, manager=devumi)\n--------------------------------------------------------------------------\numi0410가 관리하는 전체 여행 상품 조회\nTourProduct(id=1, name=미국 뉴욕 여행, manager=umi0410)\n</code></pre><p>간단한 테스트용으로 2명의 유저를 만들었고, 각각의 유저가 관리하는 2개의 여행 상품을 만들어서 조회하는 프로그램을 만들어보았습니다. repository 계층에서 만든 FindAll()이나 FindAllByManager()와 같은 메소드들을 통해 편리하게 작업할 수 있네요!</p>\n<h2 id=\"마치며\">마치며</h2>\n<p>글을 쓰다보니 백엔드 개발에서 데이터베이스가 왜 필요하고 어떤 식으로 사용되는지를 다루는 글도 아니고, Golang에서 ent 프레임워크를 사용하는 방법을 자세히 알려주는 글도 아닌 이도 저도 아닌 글이 된 건 아닌가 싶기도 합니다.</p>\n<p>그래도 앞으로 Golang으로 백엔드 개발하는 것에 대해 천천히 한 5~6편 정도의 글을 써나가볼까하는데 이때 DB 관련된 내용을 우선 짚고는 넘어가야할 것 같기도 했고, 무엇보다 한글로 된 ent 자료를 하나도 찾을 수 없다는 점에서 데이터베이스 관련 프레임워크인 ent를 소개해보고자 했습니다! ㅎㅎ</p>\n<p>지면 사정 상 코드들을 잘라서 올렸는데 원본 코드는 <a href=\"https://github.com/umi0410/how-to-backend-in-go\">https://github.com/umi0410/how-to-backend-in-go</a> 에 올려놓을테니 참고해주시면 감사하겠습니다.</p>\n<h2 id=\"참고\">참고</h2>\n<ul>\n<li><a href=\"https://entgo.io/\">https://entgo.io/</a></li>\n<li><a href=\"https://github.com/ent/ent\">https://github.com/ent/ent</a></li>\n</ul>", "url": "https://umi0410.github.io/", "author": "박진수"}, {"title": "[Kotlin] 코틀린 Enum Class란?", "preface": "", "url": "https://choheeis.github.io/newblog/archive/", "author": "김초희"}, {"title": "쿠버네티스 디플로이먼트(Deployment) - 선언적인 애플리케이션 업데이트", "preface": "쿠버네티스에서 애플리케이션의 선언적 업데이트를 가능하게 하는 디플로이먼트 리소스에 대해서 알아봅시다", "url": "https://blog.eunsukim.me", "author": "김은수"}, {"title": "본격 HTTP 쿠키 삽질기", "preface": "쿠키가 마녀에게 잡혀 있던 이유가 있었다.오븐브레이크가 아니라 멘탈브레이크였다.쿠키런때부터 인성 알아봤다.(인성 문제있어?)그렇게 탈출을 도와주려고 했는데... 쿠키 넌 개인주의야intro.#거진 2-3주에 걸친 쿠키 삽질기를 녹여낸 글입니다. 브라우저에서 쿠키를 사용할 때 엄청 애를 먹었습니다. stack overflow나 MDN를 읽는 것만으로 알기 어려운 내용도 일부 포함하였습니다.이 글을 통해서 기본적인 쿠키의 개념들과 제가 겪었던 문제의 해결법을 같이 기술하겠습니다.", "url": "https://yoonhoGo.github.io/blog", "author": "고윤호"}, {"title": "React 상태 관리의 과거, 현재, 그리고 미래", "preface": "React 앱에서 사용되는 다양한 유형의 상태를 알아보고, 이를 효과적으로 제어하기 위한 라이브러리들을 살펴봅니다.", "url": "https://velog.io/@cadenzah", "author": "김정모"}, {"title": "프론트엔드 환경 최적화 (vue를 곁들인..)", "preface": "회사에서 일하면서 점점 프로젝트가 커질수록, 성능의 중요성을 느꼈기 때문에 열심히 체크리스트를 만들고 성능 최적화에 도전하고 있다. 그 중 가장 기초적인 최적화를 진행했던 경험에 대해 적어보려고 한다.최신 프론트엔드 환경을 개선하기 위해 꼭 필요한 도구는 Webpack", "url": "https://velog.io/@sian", "author": "이시연"}, {"title": "RDB의 동시성과 일관성 이슈를 어떻게 처리할 것인가?", "preface": "웹서비스 중에 RDBMS를 채택하지 않는 경우는 드물다고 생각한다. 요즘은 ORM이 특화되어 Query를 잘 모르더라도 개발자들이 RDB를 능숙하게 다룰 수 있는 시대가 왔지만, 결제/재고 등 민감한 비즈니스를 다루는 환경에서는 RDBMS에 대하여 좀 더 깊은 지식이", "url": "https://velog.io/@p4rksh", "author": "박상훈"}, {"title": "AWS S3, Cloudfront, Route53과 github Action으로 정적 웹페이지 배포, 호스팅 자동화하기", "preface": "들어가기 전에", "url": "https://binaryflavor.com/", "author": "변준석"}, {"title": "[React] 동시성(Concurrent) 모드 그리고 Recoil", "preface": "최종 수정일: 2021. 06. 15", "url": "https://k-dev.medium.com", "author": "고명진"}, {"title": "[AWS] VPC 환경 구성 (Public, Private Subnet)", "preface": "일반적으로 네트워크 작업은 어렵다. 케이블 배선부터 시작하여 각종 네트워크 장비를 제어해야 하고 전문 기술이 필요하다. 간단하다고 생각하는 환경에서도 생각보다 네트워크 구성은 복잡하다. AWS를 사용한다면 Amazon VPC를 활용하여 복잡한 요소를 거치지 않고 Private network를 간단하게 구성하고 보안을 챙길 수 있다. 이번 포스팅에서는 자체 VPC를 구성하고, Public subnet과 Private subnet을 생성하는 아주 심플한 시나리오를 진행한다. 1. VPC 생성 우선 VPC를 하나 생성한다. 인스턴스의 public 또는 private IPv4 주소에 해당하는 DNS hostname을 제공하도록 설정할 수 있다. 위 그림처럼 Enable에 체크하면 앞으로 VPC에서 실행된 Ama..", "url": "https://suyeon96.tistory.com/", "author": "우수연"}, {"title": "안드로이드 문서 정리 - 인라인 복합 xml 리소스", "preface": "", "url": "https://yebon-kim.tistory.com/", "author": "김예본"}, {"title": "[2-3] 3) 데이터 계층 - 블록체인", "preface": "블록체인 어카운트의 상태 전이를 유발하는 트랜잭션들과 모든 관련 정보는 블록이라는 구조체에 저장됨 블록들은 시간순으로 체인처럼 연결되어있음 P2P 네트워크와 동기화 프로토콜을 통해 네트워크에 연결된 모든 노드에 전파되어 공유됨 블록 블록 헤더, 엉클 블록, 트랜잭션으로 구성됨 블록을 체인에 추가할 때 필요한 마이닝 작업의 난이도도 포함되어 있음 Etherscan.io 이더리움의 모든 정보를 탐색하고 조회할 수 있는 서비스 제공 실제 이더리움 네트워크에 참여해 모든 정보를 동기화해서 정보를 MongoDB로 옮긴 후 분석 type Bloom [32]byte type Header struct { ParentHash common.Hash UncleHash common.Hash Coinbase common.Has..", "url": "https://victoria-k.tistory.com/", "author": "권주희"}, {"title": "serverless framework로 간단한 CRUD 백엔드 어플리케이션 만들기 - 개념편", "preface": "Abstract\n본인의 프리랜스 과정에서 경험한 serverless framework를 이용해 간단한 CRUD 백엔드 어플리케이션을 만들어 보는 튜토리얼입니다.\n제 프리랜스 미션은 python으로 구현하는 것이었지만, node나 go 등의 훌륭한 언어를 통해서도 만들", "url": "https://velog.io/@ausg", "author": "AUSG"}]}