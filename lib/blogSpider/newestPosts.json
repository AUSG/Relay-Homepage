{"posts": [{"title": "개발자를 준비하는 사람들을 위한 리소스 모음 (작성중)", "preface": "생각나는대로 많이 적는게 1차적인 목표. 활용방법이나 추천 이유를 적는 것도 지금으로선 부차적인 목표.\n> 이런건 막상 적으려고 하면 모두 까먹기 마련이기에, 생각나는 때 바로바로 적도록 하자.", "url": "https://velog.io/@roeniss", "author": "문성혁"}, {"title": "모델 경량화 4 - 행렬 분해(Filter Decomposition)", "preface": "행렬 분해 by 홍원의 마스터님, BoostCamp AI Tech 8주차", "url": "https://blogik.netlify.app/", "author": "김성익"}, {"title": "ArgoCD 선언적으로 이용해나가기 - Github을 통한 SSO 및 RBAC", "preface": "시작하며\n저번 글(“ArgoCD 선언적으로 이용해나가기 - Helm, App of App”)에서는\nHelm과 App of App 패턴을 이용해 ArgoCD를 선언적으로 이용해나가는 방법을 다뤘습니다.\n바~로 ArgoCD를 좀 더 선언적으로 이용해나가는 것과 관련된 팁부터 글을 적어나가기는 좀 무리가 있을 것 같아 해당 글에서는\n배경지식들에 대한 간략한 정리와 핸즈온 같은 느낌의 내용들도 많이 포함하게 됐던 것 같아요.\n이번 글에서는 ArgoCD를 실제로 이용하기 위해 필요할만한 이런 저런 설정들을 어떻게 선언적으로 정의해볼 수 있을지를 소개해보려해요!\n그리고 그 예시로 RBAC 설정을 해보겠습니다. 이번 글에서 수행해볼 작업은 Github 계정을 ArgoCD와 연동시켜 역할(Role) 기반으로 ArgoCD의 권한을 제어하는 것이에요.\n‘왜 RBAC을 ArgoCD 커스터마이징의 예시로 했는가?‘는 제가 사이드 프로젝트에서 ArgoCD를 이용하면서 Local user(ArgoCD의 자체 계정)을 이용하는 데에 불편이 있었기 때문이에요.\n저는 ArgoCD와 Github 계정을 연동해 RBAC을 이용함으로써 해결했습니다. 이제는 Admin 계정의 패스워드를 암기할 필요도 새로운 팀원에게 새 계정을 생성해 전달할 일도 필요가 없어졌습니다! 또한 Github 계정 별로 권한을 갖도록 (e.g. readonly) 설정할 수도 있어졌습니다.\n그리고 글의 내용은 ‘제 글만 무조건 따라하면 됩니다‘보다는 ‘저는 이런 식으로 자료를 찾았고 이렇게 적용해봤어요.‘식의 내용들을 다뤄보겠습니다.\n본 글에서 사용하는 환경\n\n핸즈온 과정 참고 레포지토리 - https://github.com/umi0410/declarative-argocd/tree/master/configuring-rbac\nMinikube를 이용한 K8s Cluster\nArgoCD Helm Chart를 이용해 argocd namespace에 배포한 ArgoCD\n\nRBAC이란?\nRBAC은 Role-Based Access Contol의 약자로 쉽게 말하자면 그냥 역할 기반 권한 제어입니다.\n속성 기반으로 나름 복잡한 로직에 의해 어떤 유저가 어떤 리소스에 어떤 작업을 수행할 수 있는지를 정의하는 ABAC(Attribute-Base Access Control)에 비해 그저 간단히 역할에 권한들을 부여하고 유저들은 그 역할을 부여받음으로써 권한을 체크하게 됩니다.\n개인적으로는 많은 경우에 간단히 RBAC만으로도 권한 제어가 충분한 경우가 많은 것 같습니다. 그리고 많은 솔루션들이 RBAC 기능을 지원하는 것 같았어요. ArgoCD 또한 마찬가지로 RBAC을 지원하고 있습니다.\nGithub organization + team으로 ArgoCD RBAC 이용하기\n자, 그럼 Github의 Organization, Team을 통해 ArgoCD에서 RBAC을 이용해보는 과정을 진행해봅시다!\n1. ArgoCD에 RBAC 설정하기\n요즘 인기있는 솔루션들은 RBAC 및 기타 권한 제어 기능이 대부분 존재합니다. 보안과 권한 관리는 아주 중요하기 때문입니다. 그리고 그런 권한 제어의 방법 중 가장 대중적인 방법은 바로 RBAC 입니다.\n\n\n\n공식 문서 속 RBAC 설명\n\n공식 문서는 언제나 가장 좋은 교과서입니다. 자세한 방법은 공식 문서에서 찾아보실 수 있습니다.\n\n\n\nArgoCD Helm Chart 속 Configuration\n\n\n\n\ndefault values.yaml\n\n또한 제가 사용한 ArgoCD Helm Chart에서 제공하는 README.md 속 Configuration 부분과 default values.yaml 보면\nHelm Chart를 통해 배포한 ArgoCD의 경우 어떻게 values.yaml을 통해 rbac을 설정할 수 있는지 나와있습니다.\n기본 원리는 다음과 같습니다.\n\np, <role/user/group>, <resource>, <action>, <appproject>/<object> - AppProject에 속한 Object(e.g. Application)에 대한 권한을 정의한다.\np, <role/user/group>, <resource>, <action>, <object> - AppProject에 속하지 않는 Object(e.g. Clusters, AppProject, Repositories, …)에 대한 권한을 정의한다.\n\n그리고 위에서 말하는 Resource나 Action은 다음과 같습니다.\n\nResources: clusters, projects, applications, repositories, certificates, accounts, gpgkeys\nActions: get, create, update, delete, sync, override, action\n\n공식 문서의 설명이 좀 부족하긴하지만 Github SSO를 이용해 인증하는 경우 RBAC은 다음과 같이 설정할 수 있다고 합니다.\np, role:org-admin, applications, *, */*, allow\np, role:org-admin, clusters, get, *, allow\np, role:org-admin, repositories, get, *, allow\np, role:org-admin, repositories, create, *, allow\np, role:org-admin, repositories, update, *, allow\np, role:org-admin, repositories, delete, *, allow\ng, your-github-org:your-team, role:org-admin\n\n의미: org-admin이라는 Role이 갖는 권한들을 정의하고 해당 :에 속하는 Github user로 로그인한 경우 org-admin Role에 허용된 권한들을 갖는다.\n\n그리고 저는 다음과 같은 요구사항을 가정하려합니다.\nRBAC 요구사항\n\n나의 Github Organization khu-dev의 khumu-devops 팀의 유저들은 admin 권한을 갖는다.\n나의 Github Organization khu-dev의 khumu-devops 팀의 유저들은 readonly 권한을 갖는다.\n\n그 경우 저는 다음과 같이 values.yaml을 작성한 뒤 helm release를 update 해주면 됩니다.\n# values.yaml\nserver:\n rbacConfig:\n policy.csv: |\n g, khu-dev:khumu-developer, role:readonly\n g, khu-dev:khumu-devops, role:admin\n...\nreadonly와 admin이라는 Role은 공식문서에도 나와있듯 builtin-policy로서 이곳에 작성되어 있습니다.\n$ helm upgrade -n argocd argocd \\\n argo/argo-cd -f values.yaml\n그럼 위의 커맨드를 통해 RBAC 설정을 적용시켜주겠습니다.\n2. ArgoCD에 Github을 통한 SSO 설정하기\nArgoCD는 Dex라는 인증 관련 각종 기능을 담당하는 컴포넌트를 함께 제공하고 있습니다. Github의 OAuth2를 이용해 SSO(Single Sign On)을 이용하는 과정은 공식문서 Dex 부분에도\n소개되어있고, 사실 이대로 따라만하면 됩니다. ㅎㅎ\n\n\n\nGithub OAuth app 생성하기\n\nOrganization - Settings - Developer Settings - OAuth Apps 에서 위와 같이 OAuth App을 만들어주고 이후 생성되는 Client ID와 Client Secret을 다음과 같이 dex.config에 전달하면 됩니다.\n(사실 Organization이 아니라 개인 계정에서 App을 생성해도 동작합니다.)\n단, dex.config는 argocd-cm이라는 Configmap의 .data의 필드로 존재하기 때문에 우리는 Helm chart의 values.yaml에 dex.config를 올바르게 전달해야합니다.\n이를 위해선 server.config.dex.config를 다음과 같이 작성해주면 됩니다.\nserver:\n config:\n dex.config: |\n connectors:\n # Github OAuth를 통해 SSO하려는 경우\n - type: github\n id: github # 상관 없을 듯 뭘로 하든\n name: GitHub # 상관 없을 듯 뭘로 하든\n config:\n clientID: <your github oauth app client id>\n clientSecret: <your github oauth app client secret>\n orgs:\n - name: <your github organization name> # e.g. khu-dev\n...\nserver.config.dex.config에 작성해야한다는 것은 어떻게 알 수 있는가?\n\nArgoCD의 공식 문서에서는 argocd-cm.yaml을 ‘General Argo CD configuration’로 소개하고 있습니다.\nArgoCD Helm Chart Github에서는 values.yaml 속 server.config를 동일하게 ‘General Argo CD configuration’로 소개하고 있습니다.\n따라서 values.yaml 속 server.config에 정의하는 내용이 곧 argocd-cm.yaml의 .data가 됨을 유추할 수 있습니다.\n\n$ helm upgrade -n argocd argocd \\\n argo/argo-cd -f values.yaml\n한 번 더 위의 커맨드를 통해 RBAC 설정을 적용시켜주겠습니다.\n\n\n\nLOG IN VIA GITHUB 버튼이 추가된 모습\n\n성공적으로 Github을 통한 SSO가 활성화되면 ArgoCD에 접속할 때 위와 같이 LOG IN VIA GITHUB 버튼이 추가된 것을 확인할 수 있습니다.\n그럼 요구사항대로 khu-dev라는 Github Organization의 khumu-developer Team에 속한 계정으로 ArgoCD에 로그인해보겠습니다.\n\n\n\nUser info\n\n성공적으로 로그인한 뒤 <your argocd url>/user-info로 이동하면 위와 같이 : 이라는 이름의 그룹에 속한 모습을 볼 수 있습니다.\n\n\n\nPermission denied\n\n이후 만약 어떤 Application을 Sync하려해도 현재 속한 그룹인 khu-dev:khumu-developer는 readonly Role을 부여받았기에 어떠한 App도 Sync할 권한이 없어 위와 같이 Permission Denied 라는 에러를\n맞이하게 됩니다.\n\n\n\nUser info\n\n🎉🎉🎉 하지만 위와 같이 khu-dev:khumu-devops에 속한 계정으로 로그인한 뒤 동일하게 어떤 App을 Sync해보면 이번에는 성공적으로 App이 Sync되는 모습을 볼 수 있습니다. khu-dev:khumu-devops 그룹은 admin Role을 부여받았기 때문입니다!\n자, 그럼 이제는 admin 계정을 비롯한 username, password 기반의 계정을 이용할 필요 없이 Github을 이용해 ArgoCD의 인증/인가를 수행할 수 있습니다 ㅎㅎ\n마치며\n새로운 회사에 입사하고 행복하게 적응해나가면서 운동, 취미, 업무까지 챙기다보니 글을 작성해놓고 마무리를 오랜 시간 동안 짓지 못하다가 급히 지방선거일을 기회 삼아 글을 마무리 지어봤습니다.\n우선은 ArgoCD를 Helm chart와 함께 선언적으로 이용해나가는 내용은 이 글을 끝으로 2편으로 마무리 지어보려합니다. 사이드 프로젝트에서 ArgoCD를 이용하면서 ArgoCD는 선언적으로 관리가 가능하다는 장점을 많이\n써먹지 못하고 좀 더러운 형태로 억지로 사용하다보니 번거롭게 느껴졌던 경우가 많았는데 저 스스로도 이를 선언적인 형태로 개선하면서 많이 편해졌고, 그 과정들을 이렇게 글로 기록하고나니 나름 뿌듯합니다.\nArgoCD 관련한 또 다른 내용으로는 Applpicaitonset에 관해 추후에 기회가 되면 다뤄볼까 생각 중입니다.\n몇 년 전에 처음 데브옵스 엔지니어 인턴으로서 이쪽 일을 시작했을 때 제가 알던 ArgoCD는 ‘ArgoCD라고 요즘 쿠버네티스 환경에서 쓸만한 CD 툴이 있다더라’ 정도의 도구였던 것 같은데 이제는 자체 CD툴만을 사용하는 기업을 제외하면\n쿠버네티스를 사용하는 경우는 대부분이 ArgoCD를 이용할 정도로 대중적인 기술이 된 것 같고, 그 시절보다 많은 기능들을 편리하게 제공하는 기술이 된 것 같아 새삼 기특하단 생각이 들었습니다 ㅎㅎ.\n데브옵스로 입사하면서 거대한 규모의 클라우드 인프라를 다루다보니 네트워크 관련된 내용을 자주 접하게 되고, 이론적으로는 제가 약한 부분이라고 생각이 들어서 앞으로는 DevOps 서비스들보다는 네트워크 공부를 우선적으로 해볼까합니다!\n곧 자취를 시작할텐데 라즈베리 파이로 자취방에서 재밌는 무언가를 해볼 수 있을까 싶은 생각도 있구요 ㅎㅎ.\n시간이 되면 관련 내용을 틈틈이 기록해보겠습니다! 감사합니다.\n참고자료\n\nRBAC vs ABAC - Okta\nArgoCD 공식 문서\nArgoCD Helm Chart", "url": "https://umi0410.github.io/", "author": "박진수"}, {"title": "2장 - Application Layer", "preface": "TCP/IP 계층 중 Application Layer에 대하여 알아보고, 해당 계층의 주요 기술과 프로토콜들을 다룹니다.", "url": "https://velog.io/@cadenzah", "author": "김정모"}, {"title": "Error Handler 개발기", "preface": "기존 프로젝트는 에러가 발생했을 때, console.error로 에러를 콘솔에 찍어서 확인용으로만 작업하였다. 이렇게 조악하게 에러 처리를 하다보니 전역적인 핸들링이 필요한 경우 등에 대처할 수 없고 중복 코드가 양산되었다. 따라서 Error Handler를 개발했는데", "url": "https://velog.io/@sian", "author": "이시연"}, {"title": "RDB의 동시성과 일관성 이슈를 어떻게 처리할 것인가?", "preface": "웹서비스 중에 RDBMS를 채택하지 않는 경우는 드물다고 생각한다. 요즘은 ORM이 특화되어 Query를 잘 모르더라도 개발자들이 RDB를 능숙하게 다룰 수 있는 시대가 왔지만, 결제/재고 등 민감한 비즈니스를 다루는 환경에서는 RDBMS에 대하여 좀 더 깊은 지식이", "url": "https://velog.io/@p4rksh", "author": "박상훈"}, {"title": "AUSG 3개월간의 회고록 Part.2", "preface": "안녕하세요!\n\n저는 AUSG 4기 Organizer를 담당하고 있는 김민태라고 합니다. 👏\n\n먼저, AUSG에 오거나이저를 지내면서 지난 3개월간의 회고록 2탄을 준비했습니다.", "url": "https://velog.io/@coffee-con", "author": "김민태"}, {"title": "Chrome에서 HTTPS 걸린 로컬호스트 (localhost) 로그인하기", "preface": "chrome://flags/#allow-insecure-localhost크롬 URL에 위 주소를 입력하면 아래와 같은 화면을 볼 수 있다.\"Allow invalid certificates for resources loaded from localhost.\" 메뉴를 \"Enabled\" 처리한다.끝. inlets 계", "url": "https://binaryflavor.com/", "author": "변준석"}, {"title": "[가상화] Xen과 KVM 하이퍼바이저 아키텍처", "preface": "가상화와 하이퍼바이저에 대해 작성한 이전 글들을 읽고 오는 것을 권장한다. [가상화] 하이퍼바이저와 가상화 [가상화] Full Virtualization & Para Virtualization (전가상화와 반가상화) Xen Architecture Xen은 AWS, Citrix, 알리바바클라우드, 화웨이, 인텔, AMD, KT 등에서 정말 많이 사용하는 오픈소스 하이퍼바이저이다. Xen은 대표적인 반가상화 하이퍼바이저로 등장했지만, HVM(하드웨어 기반 가상화) 기능을 활용하여 전가상화도 지원한다. 도메인(Domain)은 Xen 환경에서 동작하고 있는 가상머신을 의미한다. 도메인은 크게 Dom0와 DomU 2가지로 나뉘는데, Dom0는 실제 물리 디바이스와 통신하기 위한 디바이스 드라이브가 존재하는 가상화..", "url": "https://suyeon96.tistory.com/", "author": "우수연"}, {"title": "안드로이드 문서 정리 - 인라인 복합 xml 리소스", "preface": "", "url": "https://yebon-kim.tistory.com/", "author": "김예본"}, {"title": "The Nature of Software Development를 읽고나서..", "preface": "들어가며 책을 좀 읽어야겠다고 다짐한 지 한 두 달 만에, 독서모임에 참여하게 되어 Ron Jeffries의 \"The Nature of Software Development\"를 읽게 되었다. 개발 서적을 읽고 독서 감상문을 적는 건 처음이라 좀 당황스럽지만..! 단순 요약이 아니라 책을 읽으면서 들었던 나의 생각과 의문점들을 적어보려 한다. 우선 이 책을 처음 마주했을 때는 생각보다 책이 얇고, 글자 크기도 크고 그림도 많아서 가볍게 읽을 수 있을 줄 알았다. 물론 지금 생각해보면 빠르고 가볍게 읽을 수 있을 것 같긴 하지만.. 독후감을 쓰기 위해 중간중간 메모하고 고민하며 읽으려 하니 속도가 늦어졌다. (물론 나의 짧은 집중력 덕분에 속도가 나지 않았을지도 😅) 서론 우선 소프트웨어 개발을 용암에 빗대..", "url": "https://victoria-k.tistory.com/", "author": "권주희"}, {"title": "serverless framework로 간단한 CRUD 백엔드 어플리케이션 만들기 - 개념편", "preface": "Abstract\n본인의 프리랜스 과정에서 경험한 serverless framework를 이용해 간단한 CRUD 백엔드 어플리케이션을 만들어 보는 튜토리얼입니다.\n제 프리랜스 미션은 python으로 구현하는 것이었지만, node나 go 등의 훌륭한 언어를 통해서도 만들", "url": "https://velog.io/@ausg", "author": "AUSG"}]}